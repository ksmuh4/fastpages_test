{
  
    
        "post0": {
            "title": "Title",
            "content": ". n = [1,2,3] print(n) print(type(n)) # 데이터 type print(id(n)) # 데이터 주소 #tuple: 수정 안되는 list n = (1,2,3) print(n) print(type(n)) # 데이터 type print(id(n)) # 데이터 주소 #dict: key-value 매칭(key값으로 value 출력), key는 중복X n = {&#39;name&#39;:&#39;jane&#39;,&#39;age&#39;:15} print(n) print(type(n)) print(id(n)) #set: 중복X, 순서X n = {&#39;name&#39;,&#39;sign&#39;} print(n) print(type(n)) # 데이터 type print(id(n)) # 데이터 주소 . a=&#39;시간은 &quot;금&quot;이다.&#39; print(a) #작은 따옴표를 넣고 싶으면 큰 따옴표 안에 b=&quot;시간은 &#39;금&#39;이다.&quot; print(b) #여러줄은 &#39;&#39;&#39;안에 c = &#39;&#39;&#39;Hello, world! 안녕하세요. python입니다.&#39;&#39;&#39; print(c) #quiz a=&quot;&#39;낮말&#39;은 새가 듣고 &#39;밤말&#39;은 쥐가 듣는다.&quot; print(a) a=&#39;&quot;시간은 금&quot;이라는 말이 있다.&#39; print(a) . a = 1&gt;2 print(a) a = 1&lt;2 print(a) . a,b = 10,20 print(a+b) ##따옴표 안의 숫자는 문자로 인식 (문자열 연산) a,b = &quot;10&quot;, &quot;20&quot; print(a+b) #숫자와 문자열은 연산 불가능 a,b = &quot;10&quot;, 20 print(a+b) . a, b = 10, &quot;20&quot; print(a+int(b)) a, b = 10, 20 print(str(a)+str(b)) a, b = 10, 20 print(float(a)+float(b)) . #input으로 입력받는 값은 문자열 name = input(&#39;이름을 입력하세요: &#39;) print(name, &#39;님 안녕하세요?&#39;) num = input(&#39;번호를 입력하세요: &#39;) print(str(num), &#39;번 안녕하세요?&#39;, type(num) ) . print(10) print(type(10)) print(type(&quot;10&quot;)) print(2&gt;3) . age = 10 print(&quot;나는&quot;, age, &quot;살입니다&quot;) # 덧셈 연산자는 자동공백 x age = &quot;음..&quot; print(&quot;나는&quot;+age+ &quot;모르겠다&quot;) # 덧셈 연산자로 연결할 때 사용하는 데이터형은 모두 문자열 english = 80 #error! result = &#39;영어점수: &#39; + english + &#39;점&#39; result = &#39;영어점수: &#39; + str(english) + &#39;점&#39; print(result) # ,는 자동공백 O age = &quot;음..&quot; print(&quot;나는&quot; ,age, &quot;모르겠다&quot;) . 나는 10 살입니다 나는음..모르겠다 영어점수: 80점 나는 음.. 모르겠다 . ##문장 사이에 변수값을 출력할 때 편리 name = input(&#39;이름을 입력하세요: &#39;) print(f&#39;{name}님 안녕하세요?&#39;) . print(&#39;두 수를 입력받아 더하는 프로그램입니다.&#39;) #1 a = input(&quot;첫번째 숫자를 입력하세요 :&quot;) b = input(&quot;두번째 숫자를 입력하세요 :&quot;) #print(int(f&#39;{a}) + int(f&#39;{b})) print(f&#39;{a}+{b} = {int(a)+int(b)}&#39;) . a = input(&quot;첫번째 숫자를 입력하세요 :&quot;) b = input(&quot;두번째 숫자를 입력하세요 :&quot;) a = int(a) b = int(b) print(f&#39;{a}+{b}=&#39;, a+b) . 첫번째 숫자를 입력하세요 :10 두번째 숫자를 입력하세요 :20 10+20= 30 . a, b = 4, 2 print(4**2) #나누기 몫 a, b = 10, 2 print(a//b) #나머지 a, b = 10, 2 print(a%b) ##파이썬은 산술연산에서 중괄호, 대괄호 X / 소괄호만 사용 . #섭씨온도: (화씨온도-32)*5/9 a = input(&quot;화씨온도: &quot;) print(&quot;섭씨온도: &quot;, (int(a)-32)*5/9) #c=(f-32)*5/9 . #삼각형 넓이 = (밑변*높이)/2 a = input(&quot;밑변:&quot;) b = input(&quot;높이:&quot;) a = float(a) b = float(b) c = print(&quot;삼각형의 넓이:&quot; , (a*b)/2) #quiz-다른풀이1 a = int(input(&quot;밑변 : &quot;)) b = int(input(&quot;높이 : &quot;)) print(f&quot;삼각형의 넓이 : {a*b/2}&quot;) #quiz-다른풀이2 print(f&#39;삼각형의 넓이: {(float(input(&quot;밑변: &quot;))*float(input(&quot;높이: &quot;)))/2}&#39;) . #원의둘레: 3.14*2*r #원의넓이: 3.14*(r**2) a = input(&quot;원의 반지름 :&quot;) print(f&#39;원의 둘레: &#39;, 3.14*2*float(a)) print(f&#39;원의 넓이: &#39;, 3.14*(float(a)**2)) #quiz-다른풀이1 a = float(input(&quot;원의 반지름: &quot;)) print(f&#39;원의 둘레: &#39;, 3.14*2*a) print(f&#39;원의 넓이: &#39;, 3.14*(a**2)) #quiz-다른풀이2 r = float(input(&quot;원의 반지름 : &quot;)) pi = 3.14 print(f&#39;원의 둘레 : {2*pi*r}, 원의넓이 : {pi*r**2}&#39;) . #여러개 변수에 하나의 값 할당 a=b=c=1 print(a,b,c) #여러개 변수에 각각 다른 값 할당 a,b,c = 1,2,3 print(a,b,c) . x = 10 x += 20 print(x) x = 3 y = 5 x *= x+y print(x) a = 1 a += 11 print(a) #12 b = 7 a *= b + a print(a) #다시 설명 num2 = 100 num3 = 200 num2 += num3 num2 = num2 + num3 . s = &quot;ha&quot; print(s*5) #문자열 연결 name = input(&quot;이름을 입력하세요: &quot;) greet = name + &quot;님, 안녕하세요&quot; print(greet) . 경기장 = input(&quot;경기장: &quot;) 이긴팀 = input(&quot;이긴팀: &quot;) 진팀 = input(&quot;진팀: &quot;) vip = input(&quot;vip: &quot;) 스코어 = input(&quot;스코어: &quot;) print(&#39;-&#39;*50) print(f&#39;&#39;&#39;오늘 {경기장}에서 경기가 열렸습니다. {이긴팀}와(과) {진팀}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼쳤습니다. 결국 {이긴팀}이(가) {진팀}을(를) {스코어}로 이겼습니다.&#39;&#39;&#39;) . loc = input(&quot;지역: &quot;) mm = input(&quot;매물종류: &quot;) p = input(&quot;평수: &quot;) n = input(&quot;방 개수: &quot;) price = input(&quot;가격: &quot;) print(&#39;-&#39;*50) print(f&#39;&#39;&#39;{loc}에 위치한 아주 좋은 {mm}이(가) 매물로 나왔습니다. 이 {mm}는 {p}평으로 {n}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . name = input(&quot;이름을 입력하세요: &quot;) kor = int(input(&quot;국어성적을 입력하세요: &quot;)) eng = int(input(&quot;영어성적을 입력하세요: &quot;)) mat = int(input(&quot;수학성적을 입력하세요: &quot;)) print(&#39;-&#39;*50) print(&#39;평균성적은&#39;, (kor+eng+mat)/3, &#39;점입니다.&#39;) #print(f&quot;이름은 {name} 평균성적은 {(kor+eng+mat)/3}점 입니다.&quot;) . #아메리카노 2, 카페라떼 3, 카푸치노 3.5 am = 2000 * int(input(&quot;아메리카노 판매 갯수: &quot;)) cl = 3000 * int(input(&quot;카페라떼 판매 갯수: &quot;)) cc = 3500 * int(input(&quot;카푸치노 판매 갯수: &quot;)) print(f&#39;총 매출은 {am+cl+cc}원입니다.&#39;) #quiz-다른풀이 ame = int(input(&#39;아메리카노 판매 갯수: &#39;)) latte = int(input(&#39;카페라떼 판매 갯수: &#39;)) chino = int(input(&#39;카푸치노 판매 갯수: &#39;)) price = (ame*2000) + (latte*3000) + (chino*3500) print(&#39;총 매출은 &#39;, price, &#39;원입니다.&#39;) . print(&#39;셀 병합 n t &#39;shift key &#39;를 누른 후 n t t병합을 원하는 셀들을 다중선택 후 shift+M&#39;) . print(&#39;-&#39;.join(&quot;Hello World&quot;)) #split: 문자열을 원하는 글자로 슬라이싱. 리스트로 출력 print(&#39;Welcome to python&#39;.split(&#39; &#39;)) . a=8==12 print(a,type(a)) #대소문자 구별 b=&#39;apple&#39;==&#39;APPLE&#39; print(b,type(b)) c=8!=12 print(c,type(c)) .",
            "url": "https://ksmuh4.github.io/fastpages_test/2021/06/07/ff.html",
            "relUrl": "/2021/06/07/ff.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ksmuh4.github.io/fastpages_test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ksmuh4.github.io/fastpages_test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . DT Python . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ksmuh4.github.io/fastpages_test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ksmuh4.github.io/fastpages_test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}